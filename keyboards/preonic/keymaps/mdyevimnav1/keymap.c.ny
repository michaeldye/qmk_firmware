#include QMK_KEYBOARD_H

#include "muse.h"

enum layers {
  _QWERTY,
  _LOWER,
  _RAISE,
  _ADJUST,
  _FN,
  _CMP
};

enum custom_keycodes {
  QWERTY = SAFE_RANGE,
  LOWER,
  RAISE,
  ADJUST,
  INIT_EQUALS,
  THIN_ARROW,
  FAT_ARROW
};

#define MOD_ENT RSFT_T(KC_ENT)
#define LOWER MO(_LOWER)
#define RAISE MO(_RAISE)

#define MOD_GUI LT(_CMP, KC_RGUI)
#define OS_LSFT OSM(MOD_LSFT)
#define OS_RSFT OSM(MOD_RSFT)


extern keymap_config_t keymap_config;

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

/* Qwerty
 *
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │  `  │  1  │  2  │  3  │  4  │  5  │    │  6  │  7  │  8  │  9  │  0  │Bksp │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │ Tab │  Q  │  W  │  E  │  R  │  T  │    │  Y  │  U  │  I  │  O  │  P  │Bksp │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │ Esc │  A  │  S  │  D  │  F  │  G  │    │  H  │  J  │  K  │  L  │  ;  │  '  │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │Shift│  Z  │  X  │  C  │  V  │  B  │    │  N  │  M  │  ,  │  .  │  /  │Enter│
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │Ctrl │ Fn  │ Alt │ Dev │Lower│ Spc │    │ Spc │Raise│ Gui │ Alt │ Fn  │Ctrl │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘    └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_QWERTY] = LAYOUT( \
  KC_GRV,     KC_1,     KC_2,    KC_3,  KC_4,   KC_5,   KC_6,  KC_7,    KC_8,    KC_9,    KC_0, KC_BSPC, \
  KC_TAB,     KC_Q,     KC_W,    KC_E,  KC_R,   KC_T,   KC_Y,  KC_U,    KC_I,    KC_O,    KC_P, KC_BSPC, \
  KC_ESC,     KC_A,     KC_S,    KC_D,  KC_F,   KC_G,   KC_H,  KC_J,    KC_K,    KC_L, KC_SCLN, KC_QUOT, \
  KC_LSFT,    KC_Z,     KC_X,    KC_C,  KC_V,   KC_B,   KC_N,  KC_M, KC_COMM,  KC_DOT, KC_SLSH, MOD_ENT, \
  KC_LCTL, MO(_FN), KC_LALT, MO(_CMP), LOWER, KC_SPC, KC_SPC, RAISE, MOD_GUI, KC_RALT, MO(_FN), KC_RCTL \
),

/* Lower
 *
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │     │     │     │     │     │     │    │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │ F1  │ F2  │ F3  │ F4  │ F5  │    │ F6  │ F7  │ F8  │ F9  │ F10 │ Del │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │ Esc │  1  │  2  │  3  │  4  │  5  │    │  6  │  7  │  8  │  9  │  0  │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │    │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │    │     │     │     │     │     │     │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘    └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_LOWER] = LAYOUT( \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______, \
  _______,   KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,       KC_F6,   KC_F7,   KC_F8,   KC_F9,  KC_F10,  KC_DEL, \
   KC_ESC,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,        KC_6,    KC_7,    KC_8,    KC_9,    KC_0, _______, \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______, \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______ \
),

/* Raise
 *
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐     ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │  `  │ F11 │ F12 │ F13 │ F14 │ F15 │     │ F16 │ F17 │ F18 │ F19 │ F20 │ Del │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │  !  │  @  │  #  │  $  │  %  │     │  ^  │  &  │  *  │  +  │  =  │MDENT│
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘     └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_RAISE] = LAYOUT( \
  _______,  _______, _______, _______, _______, _______,     _______, _______, _______, _______,  _______, _______, \
   KC_GRV,   KC_F11,  KC_F12,  KC_F13,  KC_F14,  KC_F15,      KC_F16,  KC_F17,  KC_F18,  KC_F19,   KC_F20,  KC_DEL, \
  _______,  S(KC_1), S(KC_2), S(KC_3), S(KC_4), S(KC_5),     S(KC_6), S(KC_7), S(KC_8), KC_PLUS, KC_EQUAL, MOD_ENT, \
  _______,  _______, _______, _______, _______, _______,     _______, _______, _______, _______,  _______, _______, \
  _______,  _______, _______, _______, _______, _______,     _______, _______, _______, _______,  _______, _______ \
),

/* Adjust (Lower + Raise)
 *
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐     ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │     │ \   │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │Reset│RGBTg│RGBMd│Hue D│Hue U│     │Sat D│Sat U│Val D│Val U│     │ Del │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘     └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_ADJUST] = LAYOUT( \
  _______, KC_BSLASH, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______, \
  _______,     RESET, RGB_TOG, RGB_MOD, RGB_HUD, RGB_HUI,     RGB_SAD, RGB_SAI, RGB_VAD, RGB_VAI, _______,  KC_DEL, \
  _______,   _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______, \
  _______,   _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______, \
  _______,   _______, _______, _______, _______, _______,     _______, _______, _______, _______, _______, _______ \
),

/* Fn (mostly nav)
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐     ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │ Del │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │Left │ Dn  │ Up  │Right│     │Prnt │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │Home │PgDn │PgUp │ End │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘     └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_FN] = LAYOUT( \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______,  _______, _______, _______, \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______,  _______, _______,  KC_DEL, \
  _______, _______, _______, _______, _______, _______,     KC_LEFT, KC_DOWN,   KC_UP, KC_RIGHT, _______, KC_PSCR, \
  _______, _______, _______, _______, _______, _______,     KC_HOME, KC_PGDN, KC_PGUP,   KC_END, _______, _______, \
  _______, _______, _______, _______, _______, _______,     _______, _______, _______,  _______, _______, _______ \
),

/* Complex symbols
 *
 * TODO: make this layer send copy, cut, paste and handle audio keys
 * - if possible, make shortcuts for gnome shell move windows and other useful shortcuts
 *
 *                ┌─────┬─────┬─────┬─────┬─────┬─────┐     ┌─────┬─────┬─────┬─────┬─────┬─────┐
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │  `  │  ~  │     │     │     │  {  │  }  │ ->  │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │  _  │  -  │  +  │  \  │     │  |  │  (  │  )  │  =  │ :=  │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │  [  │  ]  │ =>  │     │     │
 *                ├─────┼─────┼─────┼─────┼─────┼─────┤     ├─────┼─────┼─────┼─────┼─────┼─────┤
 *                │     │     │     │     │     │     │     │     │     │     │     │     │     │
 *                └─────┴─────┴─────┴─────┴─────┴─────┘     └─────┴─────┴─────┴─────┴─────┴─────┘
 */
[_CMP] = LAYOUT( \
  _______, _______,     _______,  _______,  _______,   _______,          _______,    _______,    _______,    _______,     _______, _______, \
  _______, _______,     _______, KC_GRAVE, KC_TILDE,   _______,          _______, S(KC_LBRC), S(KC_RBRC), THIN_ARROW,     _______, _______,
  _______, _______, S(KC_MINUS), KC_MINUS,  KC_PLUS, KC_BSLASH,     S(KC_BSLASH),    S(KC_9),    S(KC_0),   KC_EQUAL, INIT_EQUALS, _______,
  _______, _______,     _______,  _______,  _______,   _______,          _______,    KC_LBRC,    KC_RBRC,  FAT_ARROW,     _______, _______,
  _______, _______,     _______,  _______,  _______,   _______,          _______,    _______,    _______,    _______,     _______, _______
),

};

#ifdef AUDIO_ENABLE
float tone_qwerty[][2]     = SONG(QWERTY_SOUND);
#endif

void persistent_default_layer_set(uint16_t default_layer) {
  eeconfig_update_default_layer(default_layer);
  default_layer_set(default_layer);
}

//uint32_t layer_state_set_user(uint32_t state) {
//  return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);
//}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case QWERTY:
      if (record->event.pressed) {
        #ifdef AUDIO_ENABLE
          PLAY_SONG(tone_qwerty);
        #endif
        persistent_default_layer_set(1UL<<_QWERTY);
      }
      return false;
    case LOWER:
      if (record->event.pressed) {
        layer_on(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      } else {
        layer_off(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      }
      return false;
    case RAISE:
      if (record->event.pressed) {
        layer_on(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      } else {
        layer_off(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      }
      return false;
    case ADJUST:
      if (record->event.pressed) {
        layer_on(_ADJUST);
      } else {
        layer_off(_ADJUST);
      }
      return false;
    case INIT_EQUALS:
      if (record->event.pressed) {
        SEND_STRING(":=");
      }
      return false;
    case FAT_ARROW:
      if (record->event.pressed) {
        SEND_STRING("=>");
      }
      return false;
    case THIN_ARROW:
      if (record->event.pressed) {
        SEND_STRING("->");
      }
      return false;
 }
  return true;
}
